-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]
CREATE TABLE cast
(
	movie_id integer,
	cast_id integer,
	cast_name text
);
CREATE TABLE movies
(
	id integer,
	name text,
	score integer
);




-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]

.mode csv
.import e:/Data_Analysis/hw1-skeleton/Q2/movie-name-score.csv movies
.import e:/Data_Analysis/hw1-skeleton/Q2/movie-cast.csv cast


-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]
CREATE INDEX scores_index ON movies(score);
CREATE INDEX cast_index ON cast(cast_id);
CREATE INDEX movie_index ON movies(id);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate average score

-- [insert your SQL statement(s) BELOW this line]

SELECT avg(score) FROM movies WHERE score>5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find poor movies

-- [insert your SQL statement(s) BELOW this line]

SELECT * FROM movies ORDER BY score ASC, name ASC LIMIT 5;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find laid back actors

-- [insert your SQL statement(s) BELOW this line]

SELECT cast_id, cast_name, COUNT(movie_id) FROM cast GROUP BY cast_id HAVING count(movie_id)=2 LIMIT 10;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]

SELECT cast_id,cast_name,avg(score) AS average_score FROM [cast] INNER JOIN movies ON [cast].movie_id = movies.id WHERE movies.score > 40 GROUP BY cast_id HAVING count(movie_id) > 2 ORDER BY avg(score), cast_name LIMIT 10;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]

--SELECT A.cast_name AS cast_member_id1, B.cast_name AS cast_member_id2, COUNT(A.movie_id) FROM [cast] A INNER JOIN [cast] B ON A.movie_id = B.movie_id GROUP BY A.cast_name, B.cast_name HAVING COUNT(A.movie_id) > 2
--SELECT A.cast_name AS cast_member_id1, B.cast_name AS cast_member_id2, COUNT(A.movie_id), AVG(movies.score) FROM [cast] A INNER JOIN [cast] B ON A.movie_id = B.movie_id INNER JOIN movies ON A.movie_id = movies.id GROUP BY A.cast_name, B.cast_name HAVING COUNT(A.movie_id) > 2 AND AVG(movies.score) >= 40

--SELECT DISTINCT
--CASE 
--WHEN A.cast_id < B.cast_id THEN A.cast_id ELSE B.cast_id END AS cast_member_id1, 
--CASE 
--WHEN B.cast_id < A.cast_id THEN A.cast_id ELSE B.cast_id END AS cast_member_id2, COUNT(A.movie_id) AS movie_count, AVG(movies.score) AS average_movie_score
--FROM [cast] A INNER JOIN [cast] B ON A.movie_id = B.movie_id INNER JOIN movies ON A.movie_id = movies.id GROUP BY A.cast_name, B.cast_name HAVING COUNT(A.movie_id) > 2 AND AVG(movies.score) >= 40 AND A.cast_name NOT LIKE B.cast_name

CREATE VIEW good_collaboration AS SELECT DISTINCT
CASE 
WHEN A.cast_id < B.cast_id THEN A.cast_id ELSE B.cast_id END AS cast_member_id1, 
CASE 
WHEN B.cast_id < A.cast_id THEN A.cast_id ELSE B.cast_id END AS cast_member_id2, COUNT(A.movie_id) AS movie_count, AVG(movies.score) AS average_movie_score
FROM [cast] A INNER JOIN [cast] B ON A.movie_id = B.movie_id INNER JOIN movies ON A.movie_id = movies.id GROUP BY A.cast_name, B.cast_name HAVING COUNT(A.movie_id) > 2 AND AVG(movies.score) >= 40 AND A.cast_name NOT LIKE B.cast_name;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]

DROP TABLE IF EXISTS temp;
CREATE TEMPORARY TABLE temp AS
SELECT cast_member_id1, movie_count, average_movie_score FROM good_collaboration UNION ALL SELECT cast_member_id2, movie_count, average_movie_score FROM good_collaboration;
SELECT cast_member_id1 AS cast_id, [cast].cast_name, AVG(average_movie_score) AS collaboration_score FROM temp INNER JOIN [cast] ON temp.cast_member_id1 = [cast].cast_id GROUP BY cast_member_id1 ORDER BY collaboration_score DESC LIMIT 5;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]

CREATE VIRTUAL TABLE movie_overview USING fts3
(
    id integer,
    name text,
    year integer,
    overview text,
    popularity decimal
);

.import e:/Data_Analysis/hw1-skeleton/Q2/movie-overview.csv movie_overview


-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]


SELECT count(*) FROM movie_overview WHERE overview MATCH 'fight';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]

SELECT id FROM movie_overview WHERE overview MATCH 'love AND story';


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --